{"version":3,"sources":["Input.js","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["Input","handleInput","addInput","className","onSubmit","type","placeholder","onChange","ListItems","items","deleteInput","setUpdate","listItems","map","item","key","id","value","text","e","target","icon","onClick","duration","easing","library","add","faTrash","App","event","setState","current_items","Date","now","preventDefault","newItem","state","newItems","filtered_items","filter","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAceA,G,MAXD,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC5B,OACE,0BAAMC,UAAU,aAAaC,SAAUF,GACrC,2BAAOG,KAAK,OAAOC,YAAY,cAAcC,SAAUN,IACvD,4BAAQI,KAAK,UAAb,U,sBCyBSG,EA5BG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,UAC9BC,EAAYH,EAAMI,KAAI,SAAAC,GACxB,OAAO,yBAAKX,UAAU,OAAOY,IAAKD,EAAKC,KACnC,2BACI,2BAAOV,KAAK,OAAOW,GAAIF,EAAKC,IAAKE,MAAOH,EAAKI,KAC7CX,SAAU,SAACY,GACPR,EAAUQ,EAAEC,OAAOH,MAAMH,EAAKC,QAIlC,8BACI,kBAAC,IAAD,CAAiBZ,UAAU,UAAUkB,KAAK,QAAQC,QAAS,kBAAMZ,EAAYI,EAAKC,cAOlG,OACI,6BACI,kBAAC,IAAD,CAAUQ,SAAU,IAAMC,OAAO,eAChCZ,K,eClBba,IAAQC,IAAIC,K,IAuEGC,E,kDArEb,aAAe,IAAD,8BACZ,gBAUF3B,YAAc,SAAC4B,GACb,EAAKC,SAAS,CACZC,cAAe,CACbb,KAAMW,EAAMT,OAAOH,MACnBF,IAAKiB,KAAKC,UAfF,EAoBd/B,SAAW,SAAC2B,GACVA,EAAMK,iBACN,IAAMC,EAAU,EAAKC,MAAML,cAC3B,GAAqB,KAAjBI,EAAQjB,KAAa,CACvB,IAAMmB,EAAQ,sBAAO,EAAKD,MAAM3B,OAAlB,CAAyB0B,IACvC,EAAKL,SAAS,CACZrB,MAAO4B,EACPN,cAAe,CACbb,KAAM,GACNH,IAAK,QA7BC,EAqCdL,YAAc,SAACK,GACb,IAAMuB,EAAiB,EAAKF,MAAM3B,MAAM8B,QAAO,SAAAzB,GAAI,OACjDA,EAAKC,MAAQA,KAEf,EAAKe,SAAS,CACZrB,MAAO6B,KA1CG,EA6ChB3B,UAAU,SAACO,EAAKH,GACd,IAAMN,EAAM,EAAK2B,MAAM3B,MACvBA,EAAMI,KAAI,SAAAC,GACLA,EAAKC,MAAMA,IACdD,EAAKI,KAAKA,MAGZ,EAAKY,SAAS,CACZrB,MAAMA,KAnDN,EAAK2B,MAAQ,CACX3B,MAAO,GACPsB,cAAe,CACbb,KAAM,GACNH,IAAK,KANG,E,qDA2DZ,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAOF,YAAauC,KAAKvC,YAAaC,SAAUsC,KAAKtC,WACrD,kBAAC,EAAD,CAAWO,MAAO+B,KAAKJ,MAAM3B,MAAOC,YAAa8B,KAAK9B,YAAaC,UAAW6B,KAAK7B,iB,GA/DzE8B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cc1254d9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Input = ({ handleInput, addInput }) => {\r\n  return (\r\n    <form className=\"to-do-list\" onSubmit={addInput}>\r\n      <input type=\"text\" placeholder=\"Enter items\" onChange={handleInput}></input>\r\n      <button type=\"submit\">Add</button>\r\n\r\n    </form>\r\n  )\r\n\r\n}\r\n\r\nexport default Input","import React from 'react'\r\nimport './ListItems.css'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nconst ListItems = ({ items, deleteInput,setUpdate }) => {\r\n    const listItems = items.map(item => {\r\n        return <div className=\"list\" key={item.key}>\r\n            <p>\r\n                <input type=\"text\" id={item.key} value={item.text} \r\n                onChange={(e)=>{\r\n                    setUpdate(e.target.value,item.key)\r\n                }}\r\n                \r\n                />\r\n                <span>\r\n                    <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={() => deleteInput(item.key)} />\r\n                </span>\r\n\r\n            </p>\r\n\r\n        </div>\r\n    })\r\n    return (\r\n        <div>\r\n            <FlipMove duration={1000} easing=\"ease-in-out\">\r\n            {listItems}\r\n            </FlipMove>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport Input from './Input';\nimport ListItems from './ListItems';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      items: [],\n      current_items: {\n        text: \"\",\n        key: \"\"\n\n      }\n    }\n  }\n  handleInput = (event) => {\n    this.setState({\n      current_items: {\n        text: event.target.value,\n        key: Date.now()\n      }\n    })\n\n  }\n  addInput = (event) => {\n    event.preventDefault();\n    const newItem = this.state.current_items;\n    if (newItem.text !== \"\") {\n      const newItems = [...this.state.items, newItem]\n      this.setState({\n        items: newItems,\n        current_items: {\n          text: \"\",\n          key: \"\"\n        }\n\n      })\n\n    }\n\n  }\n  deleteInput = (key) => {\n    const filtered_items = this.state.items.filter(item =>\n      item.key !== key\n    )\n    this.setState({\n      items: filtered_items\n    })\n  }\nsetUpdate=(text,key)=>{\n  const items=this.state.items;\n  items.map(item=>{\n    if(item.key===key){\n    item.text=text;\n    }\n  })\n  this.setState({\n    items:items\n  })\n}\n\n\n  render() {                              \n    return (\n      <div className=\"App\">\n        <Input handleInput={this.handleInput} addInput={this.addInput} />\n        <ListItems items={this.state.items} deleteInput={this.deleteInput} setUpdate={this.setUpdate}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}